#!/usr/bin/env ruby

require 'rubygems'
require 'erb'
require 'fileutils'

template = ERB.new(File.open('config/database.yml.ci.erb') { |file| file.read })
db_host = ARGV[0]
db_user = ARGV[1]
db_pass = ARGV[2]
db_name = ARGV[3]
result = template.result(binding)
File.open("config/database.yml", "w") { |file| file.puts result }  unless File.exists?("config/database.yml")

@result = {}
def set_result(command, output, result)
  @result[command] = {:output => output, :code => result}
end

def format_code(code)
  formated = case code.to_i
    when 0 then 'OK'
    else 'ERROR'
  end
  formated.ljust(5)
end

# necháme posledních 19 měření metrik
data = Dir.glob('tmp/metric_fu/_data/*').sort
(data - (data[-19..-1] || [])).each { |f| FileUtils.rm(f) }

# spustíme metriky, migrace a postupně všechny testy, pozapínejte, co se hodí
[
#    'bundle exec metrical 2>&1',
#    'RAILS_ENV=test bundle exec rake db:migrate 2>&1',
#    'Xvfb :99 &',
#    "RAILS_ENV=test bundle exec rspec spec/models/ spec/decorators/ --format html --out \#{ENV['CC_BUILD_ARTIFACTS']}/spec_output.html 2>&1",
#    "DISPLAY=:99 bundle exec cucumber --format html --out \#{ENV['CC_BUILD_ARTIFACTS']}/cucumber.html features/ 2>&1",
].each do |command|
  output = `\#{command}`
  result = $?.exitstatus
  set_result(command, output, result)
end

n = 0
@result.each_pair do |command, result|
  n += 1
  puts "STAGE \#{n}: \#{format_code(result[:code])} (\#{command})"
end

3.times {puts ""}

@result.each_pair do |command, result|
  puts "\#{command} output: \#{result[:output]}" if result[:code].to_i > 0
end

exit(@result.max {|a| a.last[:code]}.last[:code])
